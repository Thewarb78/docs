sudo apt update
sudo apt upgrade -y

sudo apt install -y ca-certificates curl gnupg lsb-release

sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt update
sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

sudo docker --version
sudo docker run hello-world

test

####

{
  "proxies": {
    "default": {
      "httpProxy": "http://your.proxy.server:port",
      "httpsProxy": "http://your.proxy.server:port",
      "noProxy": "localhost,127.0.0.1,::1"
    }
  }
}

####


Build and then run the flask:

docker build -t flask-app:latest .

docker run --network=my_network -p 5000:5000 --name flask-app flask-app

Running with the env vars for mongo pw specified in env vars:

docker run --network=my_network -p 5000:5000   -e MONGO_USERNAME=admin -e MONGO_PASSWORD=*** -e MONGO_HOST=29471c688f24 -e MONGO_DB=reportsdb--name flask-app 

####

FROM ubuntu:latest  # Or ubuntu:20.04, ubuntu:22.04, etc.

# Install Python 3.9 and dependencies
RUN apt update && apt install -y software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa -y && \
    apt update && apt install -y python3.9 python3.9-venv python3.9-dev python3.9-distutils curl && \
    curl -sS https://bootstrap.pypa.io/get-pip.py | python3.9

# Set Python 3.9 as default
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 2 && \
    update-alternatives --set python3 /usr/bin/python3.9

# Verify
RUN python3 --version && pip3 --version


####

@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({"status": "ok"}), 200

####

import pytest
from app import app  # Adjust the import if your app file has a different name

@pytest.fixture
def client():
    app.config['TESTING'] = True
    with app.test_client() as client:
        yield client

def test_health_check(client):
    response = client.get('/health')
    assert response.status_code == 200
    assert response.get_json() == {"status": "ok"}
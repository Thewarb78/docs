sudo apt update
sudo apt upgrade -y

sudo apt install -y ca-certificates curl gnupg lsb-release

sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt update
sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

sudo docker --version
sudo docker run hello-world

test

####

{
  "proxies": {
    "default": {
      "httpProxy": "http://your.proxy.server:port",
      "httpsProxy": "http://your.proxy.server:port",
      "noProxy": "localhost,127.0.0.1,::1"
    }
  }
}

####


Build and then run the flask:

docker build -t flask-app:latest .

docker run --network=my_network -p 5000:5000 --name flask-app flask-app

Running with the env vars for mongo pw specified in env vars:

docker run --network=my_network -p 5000:5000   -e MONGO_USERNAME=admin -e MONGO_PASSWORD=*** -e MONGO_HOST=29471c688f24 -e MONGO_DB=reportsdb--name flask-app 

####

FROM ubuntu:latest  # Or ubuntu:20.04, ubuntu:22.04, etc.

# Install Python 3.9 and dependencies
RUN apt update && apt install -y software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa -y && \
    apt update && apt install -y python3.9 python3.9-venv python3.9-dev python3.9-distutils curl && \
    curl -sS https://bootstrap.pypa.io/get-pip.py | python3.9

# Set Python 3.9 as default
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 2 && \
    update-alternatives --set python3 /usr/bin/python3.9

# Verify
RUN python3 --version && pip3 --version


####

@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({"status": "ok"}), 200

####

import pytest
from app import app  # Adjust the import if your app file has a different name

@pytest.fixture
def client():
    app.config['TESTING'] = True
    with app.test_client() as client:
        yield client

def test_health_check(client):
    response = client.get('/health')
    assert response.status_code == 200
    assert response.get_json() == {"status": "ok"}

#####


pipeline {
    agent any

    environment {
        ARTIFACTORY_URL = 'https://your-artifactory.com'
        ARTIFACTORY_REPO_DEV = 'docker-local-dev'
        ARTIFACTORY_REPO_RELEASE = 'docker-local-release'
        IMAGE_NAME = 'your-app'
        ARTIFACTORY_USER = credentials('artifactory-user')
        ARTIFACTORY_PASSWORD = credentials('artifactory-password')

        ENVIRONMENT = sh(script: '''
            case "$JOB_NAME" in
                *dev*) echo "dev" ;;
                *stg*) echo "stg" ;;
                *prd*) echo "prd" ;;
                *) echo "unknown" ;;
            esac
        ''', returnStdout: true).trim()
    }

    stages {
        stage('Debug: Show Environment') {
            steps {
                script {
                    echo "üîç DEBUG: Detected Environment: ${env.ENVIRONMENT}"
                }
            }
        }

        stage('Build & Push Dev (Auto)') {
            when { expression { env.ENVIRONMENT == 'dev' } }
            steps {
                script {
                    def server = Artifactory.newServer url: ARTIFACTORY_URL
                    def rtDocker = Artifactory.docker server: server
                    def devTag = "${ARTIFACTORY_REPO_DEV}/${IMAGE_NAME}:latest-dev"

                    def buildInfo = rtDocker.push("${devTag}", forceXrayScan: true)
                    server.publishBuildInfo buildInfo
                    echo "‚úÖ Dev image pushed as latest-dev (overwritten)."
                }
            }
        }

        stage('Promote to Staging (Gated)') {
            when { expression { env.ENVIRONMENT == 'stg' } }
            steps {
                script {
                    def server = Artifactory.newServer url: ARTIFACTORY_URL
                    def promotionConfig = [
                        'targetRepo': ARTIFACTORY_REPO_RELEASE,
                        'dockerRepository': IMAGE_NAME,
                        'tag': 'latest-dev',
                        'targetTag': 'latest-stg',
                        'copy': true
                    ]

                    server.dockerPromote promotionConfig
                    echo "‚úÖ Staging image promoted from latest-dev to latest-stg."
                }
            }
        }

        stage('Verify Staging Deployment Before Prod') {
            when { expression { env.ENVIRONMENT == 'prd' } }
            steps {
                script {
                    echo "üîç Checking if latest-stg exists before proceeding to Production..."
                    def stgExists = sh(script: """
                        curl -s -u ${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD} \\
                             -X GET "${ARTIFACTORY_URL}/artifactory/api/docker/${ARTIFACTORY_REPO_RELEASE}/v2/${IMAGE_NAME}/manifests/latest-stg" \\
                             -o /dev/null -w "%{http_code}"
                    """, returnStdout: true).trim()

                    if (stgExists != "200") {
                        error "‚ùå ERROR: Staging image does not exist in Artifactory. Cannot proceed to production."
                    }

                    echo "‚úÖ Staging image exists. Proceeding to Production."
                }
            }
        }

        stage('Promote to Production (Gated)') {
            when { expression { env.ENVIRONMENT == 'prd' } }
            steps {
                script {
                    def server = Artifactory.newServer url: ARTIFACTORY_URL
                    def promotionConfig = [
                        'targetRepo': ARTIFACTORY_REPO_RELEASE,
                        'dockerRepository': IMAGE_NAME,
                        'tag': 'latest-stg', // ‚úÖ Copy Staging, not Dev!
                        'targetTag': 'latest-prd',
                        'copy': true
                    ]

                    server.dockerPromote promotionConfig
                    echo "‚úÖ Production image copied from latest-stg to latest-prd."
                }
            }
        }
    }

    post {
        success {
            echo "üéâ Pipeline completed successfully for ${env.ENVIRONMENT}!"
        }
        failure {
            echo "‚ùå Pipeline failed for ${env.ENVIRONMENT}. Check logs."
        }
    }
}

####

Get Details of Blocking Queries

SELECT 
    r.session_id, 
    r.blocking_session_id, 
    r.wait_type, 
    r.wait_time / 1000 AS WaitTimeSec, 
    r.wait_resource, 
    t.text AS SQLQuery
FROM sys.dm_exec_requests r
CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) t
WHERE r.blocking_session_id <> 0;

####

Find Queries Currently Running in the Usage Database

USE WSS_UsageApplication; -- Change to your SharePoint DB
GO

SELECT 
    r.session_id, 
    r.status, 
    r.command, 
    r.wait_type, 
    r.wait_time / 1000 AS WaitTimeSec, 
    r.blocking_session_id, 
    t.text AS SQLQuery
FROM sys.dm_exec_requests r
CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) t
WHERE r.database_id = DB_ID();

####

Find the Most Blocked Queries (Historical Data)

SELECT 
    blocking_session_id AS BlockingSession, 
    COUNT(*) AS BlockedQueries
FROM sys.dm_exec_requests
WHERE blocking_session_id <> 0
GROUP BY blocking_session_id
ORDER BY COUNT(*) DESC;

####

Find the Largest Tables in the Usage DB (Possible Cause of Blocking)

USE WSS_UsageApplication; -- Change this to your Usage DB
GO

SELECT 
    t.NAME AS TableName, 
    p.rows AS RowCounts, 
    SUM(a.total_pages) * 8 / 1024 AS TotalSpaceMB
FROM sys.tables t
JOIN sys.indexes i ON t.OBJECT_ID = i.object_id
JOIN sys.partitions p ON i.object_id = p.OBJECT_ID AND i.index_id = p.index_id
JOIN sys.allocation_units a ON p.partition_id = a.container_id
GROUP BY t.Name, p.Rows
ORDER BY TotalSpaceMB DESC;

import requests

def getOAuthAccessToken(host, endpoint, basicAuthString):
    url = f"https://{host}{endpoint}"  # Construct full URL
    payload = {'grant_type': 'client_credentials'}  # Use a dictionary for form data
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Authorization': basicAuthString
    }

    # Make the POST request
    response = requests.post(url, data=payload, headers=headers)

    # Raise an error if the request fails
    response.raise_for_status()

    # Parse JSON response
    json_data = response.json()

    # Return access token
    return json_data.get("access_token", None)

def makeBearerCall(host, token, verb, endpoint):
    url = f"https://{host}{endpoint}"  # Construct full URL
    headers = {
        'Authorization': f'Bearer {token}'
    }

    # Make the request with the specified HTTP verb
    response = requests.request(verb, url, headers=headers)

    # Raise an error if the request fails
    response.raise_for_status()

    # Return response content as text
    return response.text

    import requests
import json

# Define the URL of the web service
url = "https://example.com/api/data"  # Replace with the actual API endpoint

try:
    # Make a GET request to the web service
    response = requests.get(url)

    # Ensure the request was successful
    response.raise_for_status()

    # Parse the JSON response
    data = response.json()

    # Print the parsed JSON data in a structured format
    for entry in data:
        print(f"SUB ID: {entry.get('SUB ID', 'N/A')}")
        print(f"SERVER: {entry.get('SERVER', 'N/A')}")
        print(f"ECOSYSTEM: {entry.get('ECOSYSTEM', 'N/A')}")
        print("-" * 30)

except requests.exceptions.RequestException as e:
    print(f"Error fetching data: {e}")
except json.JSONDecodeError:
    print("Error parsing JSON response")

import requests

url = "https://your-api-endpoint.com"  # Replace with actual API URL
try:
    response = requests.get(url)
    response.raise_for_status()
except requests.exceptions.SSLError as e:
    print(f"SSL Error: {e}")
except requests.exceptions.RequestException as e:
    print(f"Request failed: {e}")

import requests
from requests.adapters import HTTPAdapter
from urllib3.util.ssl_ import create_urllib3_context

class TLSAdapter(HTTPAdapter):
    def init_poolmanager(self, *args, **kwargs):
        ctx = create_urllib3_context()
        ctx.minimum_version = 3  # Forces TLS 1.2 or higher
        kwargs['ssl_context'] = ctx
        super().init_poolmanager(*args, **kwargs)

session = requests.Session()
session.mount("https://", TLSAdapter())

url = "https://your-api-endpoint.com"
response = session.get(url, verify=False)  # Set verify=False only for debugging
print(response.text)

[System.Net.WebRequest]::DefaultWebProxy = New-Object System.Net.WebProxy("http://proxyserver:8080", $true)
[System.Net.WebRequest]::DefaultWebProxy.Credentials = [System.Net.CredentialCache]::DefaultCredentials
